{"ast":null,"code":"export function pluralize(name, count) {\n  if (count === 1) {\n    return name;\n  }\n\n  return name + 's';\n}\nexport function idbPromise(storeName, method, object) {\n  return new Promise((resolve, reject) => {\n    // open connection to the database `shop-shop` with the version of 1\n    const request = window.indexedDB.open('shop-shop', 1); // create variables to hold reference to the database, transaction (tx), and object store\n\n    let db, tx, store; // if version has changed (or if this is the first time using the database), run this method and create the three object stores \n\n    request.onupgradeneeded = function (e) {\n      const db = request.result; // create object store for each type of data and set \"primary\" key index to be the `_id` of the data\n\n      db.createObjectStore('products', {\n        keyPath: '_id'\n      });\n      db.createObjectStore('categories', {\n        keyPath: '_id'\n      });\n      db.createObjectStore('cart', {\n        keyPath: '_id'\n      });\n    }; // handle any errors with connecting\n\n\n    request.onerror = function (e) {\n      console.log('There was an error');\n    }; // on database open success\n\n\n    request.onsuccess = function (e) {\n      // save a reference of the database to the `db` variable\n      db = request.result; // open a transaction do whatever we pass into `storeName` (must match one of the object store names)\n\n      tx = db.transaction(storeName, 'readwrite'); // save a reference to that object store\n\n      store = tx.objectStore(storeName); // if there's any errors, let us know\n\n      db.onerror = function (e) {\n        console.log('error', e);\n      };\n\n      switch (method) {\n        case 'put':\n          store.put(object);\n          resolve(object);\n          break;\n\n        case 'get':\n          const all = store.getAll();\n\n          all.onsuccess = function () {\n            resolve(all.result);\n          };\n\n          break;\n\n        case 'delete':\n          store.delete(object._id);\n          break;\n\n        default:\n          console.log('No valid method');\n          break;\n      } // when the transaction is complete, close the connection\n\n\n      tx.oncomplete = function () {\n        db.close();\n      };\n    };\n  });\n}","map":{"version":3,"names":["pluralize","name","count","idbPromise","storeName","method","object","Promise","resolve","reject","request","window","indexedDB","open","db","tx","store","onupgradeneeded","e","result","createObjectStore","keyPath","onerror","console","log","onsuccess","transaction","objectStore","put","all","getAll","delete","_id","oncomplete","close"],"sources":["C:/Users/sammc/Code/projects/shop-shop/client/src/utils/helpers.js"],"sourcesContent":["export function pluralize(name, count) {\n  if (count === 1) {\n    return name\n  }\n  return name + 's'\n}\nexport function idbPromise(storeName, method, object) {\n  return new Promise((resolve, reject) => {\n    // open connection to the database `shop-shop` with the version of 1\n    const request = window.indexedDB.open('shop-shop', 1);\n\n    // create variables to hold reference to the database, transaction (tx), and object store\n    let db, tx, store;\n\n    // if version has changed (or if this is the first time using the database), run this method and create the three object stores \n    request.onupgradeneeded = function(e) {\n      const db = request.result;\n      // create object store for each type of data and set \"primary\" key index to be the `_id` of the data\n      db.createObjectStore('products', { keyPath: '_id' });\n      db.createObjectStore('categories', { keyPath: '_id' });\n      db.createObjectStore('cart', { keyPath: '_id' });\n    };\n\n    // handle any errors with connecting\n    request.onerror = function(e) {\n      console.log('There was an error');\n    };\n// on database open success\nrequest.onsuccess = function(e) {\n  // save a reference of the database to the `db` variable\n  db = request.result;\n  // open a transaction do whatever we pass into `storeName` (must match one of the object store names)\n  tx = db.transaction(storeName, 'readwrite');\n  // save a reference to that object store\n  store = tx.objectStore(storeName);\n\n  // if there's any errors, let us know\n  db.onerror = function(e) {\n    console.log('error', e);\n  };\n  switch (method) {\n    case 'put':\n      store.put(object);\n      resolve(object);\n      break;\n    case 'get':\n      const all = store.getAll();\n      all.onsuccess = function() {\n        resolve(all.result);\n      };\n      break;\n    case 'delete':\n      store.delete(object._id);\n      break;\n    default:\n      console.log('No valid method');\n      break;\n  }\n  // when the transaction is complete, close the connection\n  tx.oncomplete = function() {\n    db.close();\n  };\n};\n  });\n  \n}"],"mappings":"AAAA,OAAO,SAASA,SAAT,CAAmBC,IAAnB,EAAyBC,KAAzB,EAAgC;EACrC,IAAIA,KAAK,KAAK,CAAd,EAAiB;IACf,OAAOD,IAAP;EACD;;EACD,OAAOA,IAAI,GAAG,GAAd;AACD;AACD,OAAO,SAASE,UAAT,CAAoBC,SAApB,EAA+BC,MAA/B,EAAuCC,MAAvC,EAA+C;EACpD,OAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;IACtC;IACA,MAAMC,OAAO,GAAGC,MAAM,CAACC,SAAP,CAAiBC,IAAjB,CAAsB,WAAtB,EAAmC,CAAnC,CAAhB,CAFsC,CAItC;;IACA,IAAIC,EAAJ,EAAQC,EAAR,EAAYC,KAAZ,CALsC,CAOtC;;IACAN,OAAO,CAACO,eAAR,GAA0B,UAASC,CAAT,EAAY;MACpC,MAAMJ,EAAE,GAAGJ,OAAO,CAACS,MAAnB,CADoC,CAEpC;;MACAL,EAAE,CAACM,iBAAH,CAAqB,UAArB,EAAiC;QAAEC,OAAO,EAAE;MAAX,CAAjC;MACAP,EAAE,CAACM,iBAAH,CAAqB,YAArB,EAAmC;QAAEC,OAAO,EAAE;MAAX,CAAnC;MACAP,EAAE,CAACM,iBAAH,CAAqB,MAArB,EAA6B;QAAEC,OAAO,EAAE;MAAX,CAA7B;IACD,CAND,CARsC,CAgBtC;;;IACAX,OAAO,CAACY,OAAR,GAAkB,UAASJ,CAAT,EAAY;MAC5BK,OAAO,CAACC,GAAR,CAAY,oBAAZ;IACD,CAFD,CAjBsC,CAoB1C;;;IACAd,OAAO,CAACe,SAAR,GAAoB,UAASP,CAAT,EAAY;MAC9B;MACAJ,EAAE,GAAGJ,OAAO,CAACS,MAAb,CAF8B,CAG9B;;MACAJ,EAAE,GAAGD,EAAE,CAACY,WAAH,CAAetB,SAAf,EAA0B,WAA1B,CAAL,CAJ8B,CAK9B;;MACAY,KAAK,GAAGD,EAAE,CAACY,WAAH,CAAevB,SAAf,CAAR,CAN8B,CAQ9B;;MACAU,EAAE,CAACQ,OAAH,GAAa,UAASJ,CAAT,EAAY;QACvBK,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBN,CAArB;MACD,CAFD;;MAGA,QAAQb,MAAR;QACE,KAAK,KAAL;UACEW,KAAK,CAACY,GAAN,CAAUtB,MAAV;UACAE,OAAO,CAACF,MAAD,CAAP;UACA;;QACF,KAAK,KAAL;UACE,MAAMuB,GAAG,GAAGb,KAAK,CAACc,MAAN,EAAZ;;UACAD,GAAG,CAACJ,SAAJ,GAAgB,YAAW;YACzBjB,OAAO,CAACqB,GAAG,CAACV,MAAL,CAAP;UACD,CAFD;;UAGA;;QACF,KAAK,QAAL;UACEH,KAAK,CAACe,MAAN,CAAazB,MAAM,CAAC0B,GAApB;UACA;;QACF;UACET,OAAO,CAACC,GAAR,CAAY,iBAAZ;UACA;MAhBJ,CAZ8B,CA8B9B;;;MACAT,EAAE,CAACkB,UAAH,GAAgB,YAAW;QACzBnB,EAAE,CAACoB,KAAH;MACD,CAFD;IAGD,CAlCD;EAmCG,CAxDM,CAAP;AA0DD"},"metadata":{},"sourceType":"module"}